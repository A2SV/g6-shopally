// Code generated by mockery v2.53.5. DO NOT EDIT.

package testmocks

import (
	context "context"

	util "github.com/shopally-ai/pkg/util"
	mock "github.com/stretchr/testify/mock"
)

// PriceFetcher is an autogenerated mock type for the PriceFetcher type
type PriceFetcher struct {
	mock.Mock
}

// FetchPrices provides a mock function with given fields: ctx, productIDs
func (_m *PriceFetcher) FetchPrices(ctx context.Context, productIDs []string) (map[string]util.PriceAmounts, error) {
	ret := _m.Called(ctx, productIDs)

	if len(ret) == 0 {
		panic("no return value specified for FetchPrices")
	}

	var r0 map[string]util.PriceAmounts
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []string) (map[string]util.PriceAmounts, error)); ok {
		return rf(ctx, productIDs)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []string) map[string]util.PriceAmounts); ok {
		r0 = rf(ctx, productIDs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]util.PriceAmounts)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []string) error); ok {
		r1 = rf(ctx, productIDs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewPriceFetcher creates a new instance of PriceFetcher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPriceFetcher(t interface {
	mock.TestingT
	Cleanup(func())
}) *PriceFetcher {
	mock := &PriceFetcher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
