package mocks

import (
	"context"

	"github.com/stretchr/testify/mock"

	"github.com/shopally/chat-history/internal/domain"
)

// MockChatRepository is an autogenerated mock type for the ChatRepository type
type MockChatRepository struct {
	mock.Mock
}

// FindByUserEmail provides a mock function with given fields: ctx, userEmail
func (_m *MockChatRepository) FindByUserEmail(ctx context.Context, userEmail string) (*domain.ChatHistory, error) {
	ret := _m.Called(ctx, userEmail)

	var r0 *domain.ChatHistory
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.ChatHistory); ok {
		r0 = rf(ctx, userEmail)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.ChatHistory)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userEmail)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PushChatSession provides a mock function with given fields: ctx, userEmail, chatSession
func (_m *MockChatRepository) PushChatSession(ctx context.Context, userEmail string, chatSession domain.ChatSession) (string, error) {
	ret := _m.Called(ctx, userEmail, chatSession)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string, domain.ChatSession) string); ok {
		r0 = rf(ctx, userEmail, chatSession)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, domain.ChatSession) error); ok {
		r1 = rf(ctx, userEmail, chatSession)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PushMessageToSession provides a mock function with given fields: ctx, userEmail, chatID, message
func (_m *MockChatRepository) PushMessageToSession(ctx context.Context, userEmail, chatID string, message domain.Message) error {
	ret := _m.Called(ctx, userEmail, chatID, message)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, domain.Message) error); ok {
		r0 = rf(ctx, userEmail, chatID, message)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PullChatSession provides a mock function with given fields: ctx, userEmail, chatID
func (_m *MockChatRepository) PullChatSession(ctx context.Context, userEmail, chatID string) error {
	ret := _m.Called(ctx, userEmail, chatID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, userEmail, chatID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
